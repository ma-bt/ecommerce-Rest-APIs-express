let Joi,CustomErrorHandler;_44c‍.x([["default",()=>_44c‍.o]]);_44c‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_44c‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);

const registerController = {
  async register(req, res, next) {
    /*  register logic */

    /* validate the request */
    const registerSchema /* creating schema */ = Joi.object({
      name: Joi.string().min(3).max(30).required(), //validating for name
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"), // ref = reference of password
    });
    const { error } = registerSchema.validate(req.body); //for error validaing the request body

    if (error) {
      return next(error);
    }

    /* authorize the request */
    /* check if user is in the database already */

    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExists("This email is already taken")
        );
      }
    } catch (err) {
      return next(err); // takes errorfrom the default error handler
    }

    /* prepare model */
    /* store in database */
    /* generate jwt token */
    /* send response */

    res.json({ msg: "Hello world" });
  },
};
_44c‍.d(registerController);
