let Joi,RefreshToken,User,bcrypt,CustomErrorHandler,JwtService,REFRESH_TOKEN_SECRET;_6ce‍.x([["default",()=>_6ce‍.o]]);_6ce‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_6ce‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_6ce‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_6ce‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_6ce‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_6ce‍.w("../../config",[["REFRESH_TOKEN_SECRET",["REFRESH_TOKEN_SECRET"],function(v){REFRESH_TOKEN_SECRET=v}]]);







const loginController = {
  async login(req, res, next) {
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });

    const { error } = loginSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    try {
      const user =  await User.findOne({ email: req.body.email });
      _6ce‍.g.console.log(user,"User");
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      //campare the password

      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      //token generate
      const access_token = JwtService.sign(
        {
          _id: user._id,
          role: user.role,
        } //payload
      );

      const refresh_token = JwtService.sign(
        { _id: user._id, role: user.role },
        "1y",
        REFRESH_TOKEN_SECRET
      );

      await RefreshToken.create({token: refresh_token})
      res.json({ access_token, refresh_token });
    } catch (err) {
      return next(err);
    }
  },
};

_6ce‍.d(loginController);
